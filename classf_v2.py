# -*- coding: utf-8 -*-
"""asian_paints_v2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dqe57smo_m00z3gWxPGje0POFf45X6_L
"""

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.feature_extraction.text import ENGLISH_STOP_WORDS
from sklearn.linear_model import LogisticRegression
from sklearn.multiclass import OneVsRestClassifier
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn import linear_model
import numpy as np
from sklearn.metrics import classification_report, confusion_matrix
import re
from sklearn.metrics import classification_report, confusion_matrix

data=pd.read_excel("Training set.xlsx",sheet_name="Training Set",usecols=("PRODUCT_DESCRIPITION","Classifed"))

data.head()

data["PRODUCT_DESCRIPITION"] = data["PRODUCT_DESCRIPITION"].str.replace('[^a-zA-Z\d\s+]',"")
data["PRODUCT_DESCRIPITION"] = data["PRODUCT_DESCRIPITION"].apply(lambda x: re.sub('\d\d\d\d\d\d+', '',x))
data["Classifed"] = data["Classifed"].fillna("None")

data["Classifed"].unique()

fe = TfidfVectorizer(
    min_df=1,
    max_df=1.0,
    ngram_range=(1, 4),
    max_features=5000,
    stop_words=ENGLISH_STOP_WORDS,
    decode_error='ignore'
)

fe

x_data = fe.fit_transform(data["PRODUCT_DESCRIPITION"])

X_train, X_test, y_train, y_test = train_test_split(x_data, data['Classifed'], test_size=0.2, random_state=1)

X_train.shape, X_test.shape,y_train.shape, y_test.shape

clf = OneVsRestClassifier(estimator=LogisticRegression(C=59.94842503189409, class_weight=None,
                                                 dual=False, fit_intercept=True,
                                                 intercept_scaling=1,
                                                 l1_ratio=None, max_iter=100,
                                                 multi_class='warn',
                                                 n_jobs=None, penalty='l1',
                                                 random_state=None,
                                                 solver='warn', tol=0.0001,
                                                 verbose=0, warm_start=False))

clf.fit(X_train, y_train)

predicted = clf.predict(X_test)

print(classification_report(y_test, predicted))

print(confusion_matrix(y_test, predicted))

